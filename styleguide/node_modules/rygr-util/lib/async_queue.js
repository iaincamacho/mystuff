var _;

_ = require('underscore');

module.exports = function(args, callbacks, done) {
  var baseArity, callback, handle, stack, _i, _len;
  stack = [];
  if (!_.isArray(args)) {
    args = [args];
  }
  baseArity = args.length + 1;
  if (!_.isArray(callbacks)) {
    if (_.isFunction(callbacks)) {
      callbacks = [callbacks];
    } else {
      throw new Error("Callbacks must be an array of functions");
    }
  }
  for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
    callback = callbacks[_i];
    if (_.isFunction(callback)) {
      stack.push({
        handle: callback
      });
    } else {
      throw new Error("Callback is not a function");
    }
  }
  handle = function() {
    var index, next;
    index = 0;
    next = function(err) {
      var arity, e, layer;
      layer = stack[index++];
      if (!layer) {
        if (typeof done === "function") {
          done(err);
        }
        return;
      }
      try {
        arity = layer.handle.length;
        if (err) {
          if (arity === baseArity + 1) {
            return layer.handle.apply(void 0, [err].concat(args, [next]));
          } else {
            return next(err);
          }
        } else if (arity < baseArity + 1) {
          return layer.handle.apply(void 0, args.concat([next]));
        } else {
          return next();
        }
      } catch (_error) {
        e = _error;
        return next(e);
      }
    };
    return next();
  };
  return handle();
};
